# import socket  # 導入 socket 庫，用於網路通訊
import numpy as np  # 導入 NumPy 庫，用於數組操作
import cv2  # 導入 OpenCV 庫，用於影像處理
import socket  # 用於建立 TCP 連接
import time  # 用於計時

HOST = ('192.168.0.7')  # 伺服端的 IP 地址
PORT = 12345  # 伺服端的埠號

##訊息測試
# s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# s.connect((HOST, PORT))
# while True:
#     outdata = input('please input message: ')  # 從用戶輸入一條消息
#     print('send: ' + outdata)  # 顯示發送的消息
#     s.send(outdata.encode())  # 發送消息到伺服端
#
#     indata = s.recv(1024)  # 接收伺服端的回應
#     if len(indata) == 0:  # connection closed
#         s.close()  # 如果連接關閉，釋放資源
#         print('server closed connection.')
#         break
#     print('recv: ' + indata.decode())  # 打印伺服端回應


# 設置客戶端的 TCP socket
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # 建立 TCP 連接的 Socket
client.connect((HOST, PORT))  # 連接至伺服端
print("已連接至伺服端")

# RTSP 串流地址
url = 'rtsp://admin:53373957@192.168.144.108:554/cam/realmonitor?channel=1&subtype=1'
cap = cv2.VideoCapture(url)  # 使用 OpenCV 打開 RTSP 串流，用於讀取影像

try:
    latest_frame = None  # 用於存儲最新的影像幀
    frame_count = 0  # 用於統計發送影像的數量
    while True:  # 無限循環，持續處理影像
        ret, frame = cap.read()  # 從 RTSP 串流中讀取一幀
        if not ret:  # 如果無法讀取到影像
            print("無法接收影像，結束傳輸")  # 輸出錯誤信息
            break  # 跳出循環，結束傳輸
        latest_frame = frame  # 將最新的影像幀存儲到變數中

        # 處理幀
        # 檢查伺服端是否回應允許發送下一幀
        response = client.recv(16).decode('utf-8').strip()  # 接收來自伺服端的回應
        if response == "NEXT":  # 如果伺服端回應為 "NEXT"
            print("伺服端處理完成，準備傳送最新影像")  # 輸出訊息
            _, buffer = cv2.imencode('.jpg', latest_frame)  # 將影像壓縮為 JPG 格式的緩衝區
            data = np.array(buffer)  # 轉換為 NumPy 數組
            stringData = data.tobytes()  # 將數組轉換為字節數據

            # 發送數據
            client.send(str(len(stringData)).ljust(16).encode('utf-8'))  # 發送影像長度
            client.send(stringData)  # 發送影像字節數據
            frame_count += 1  # 計數器加一
            print(f"已發送影像幀數: {frame_count}")  # 輸出發送幀數

except Exception as e:  # 捕獲所有異常
    print(f"發送數據時發生錯誤: {e}")  # 打印異常信息

finally:  # 無論是否發生異常，都執行以下操作
    cap.release()  # 釋放 RTSP 串流資源
    client.close()  # 關閉客戶端連接
    print("傳輸結束，連接已關閉")  # 輸出結束信息
