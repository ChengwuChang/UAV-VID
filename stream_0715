import time
import cv2
import os
import pyautogui
import shutil
from time import sleep
from UAV_0715 import split_image, main

# 定義調整參數
big_map_img = cv2.imread("14/jpg/14/23/23-1.jpg")

# 指定要分割的行和列數
num_rows = 6
num_cols = 6
new_num_rows = 3
new_num_cols = 3
all_blocks,block_height,block_width = split_image(big_map_img, num_rows, num_cols)
blocks = all_blocks

# # 定義RTSP流的URL
# url = 'rtsp://admin:53373957@192.168.144.108:554/cam/realmonitor?channel=1&subtype=1'
#
# # 打開RTSP流
# cap = cv2.VideoCapture(url)
#
# # 檢查是否成功打開
# if not cap.isOpened():
#     print("無法打開RTSP流")
#     exit()
#
# print("RTSP流已打開")
#
# # 創建保存圖片的資料夾
# output_folder = 'captured_frames'
# os.makedirs(output_folder, exist_ok=True)
# current_directory = os.getcwd()
# print("當前工作目錄:", current_directory)
#
# # 設置緩衝區大小為1，確保處理的是最新帧
# cap.set(cv2.CAP_PROP_BUFFERSIZE, 0.5)
#
# frame_count = 0
#
# # 循環處理每一帧
# while cap.isOpened():
#     # 讀取一帧視頻
#     ret, frame = cap.read()
#
#     # 檢查是否成功讀取
#     if not ret:
#         print("無法讀取視頻帧")
#         break
#
#     # 儲存圖片
#     frame_count += 1
#     image_path = os.path.join(output_folder, f"frame_{frame_count}.jpg")
#     cv2.imwrite(image_path, frame)
#     print(f"已儲存 {image_path}")
#
#     # 將保存的圖片路徑傳遞給main函數
#     main(blocks, image_path)
#
#     # 顯示原始影像帧
#     cv2.imshow('RTSP Stream', frame)
#
#     # 按下 'q' 鍵退出循環
#     if cv2.waitKey(1) & 0xFF == ord('q'):
#         break
#
# # 釋放視頻捕獲對象
# cap.release()
#
# # 關閉所有OpenCV窗口
# cv2.destroyAllWindows()
# ------------------------------------------------------------------------------------

def clear_folder(folder_path):
    # 檢查資料夾是否存在
    if not os.path.exists(folder_path):
        print(f"資料夾 {folder_path} 不存在")
        return

    # 刪除資料夾中的所有文件和子資料夾
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        try:
            if os.path.isfile(file_path) or os.path.islink(file_path):
                os.unlink(file_path)  # 刪除文件或符號連結
            elif os.path.isdir(file_path):
                shutil.rmtree(file_path)  # 刪除子資料夾
        except Exception as e:
            print(f"刪除 {file_path} 時發生錯誤: {e}")

# 指定要清空的資料夾路徑
folder_path = 'captured_frames'

# 清空資料夾
clear_folder(folder_path)
print(f"資料夾 {folder_path} 已清空")

# 獲取螢幕的寬度和高度
screen_width, screen_height = pyautogui.size()

# 設定截圖區域為影片螢幕
# left_half_region = (0, 0, screen_width // 2, screen_height)
x1, y1, x2, y2 = (0,230,960,800)
# 等待開始截圖的條件
input("按 'p' 鍵開始截圖，並按 Enter 確認。")

output_folder = 'captured_frames'
os.makedirs(output_folder, exist_ok=True)
current_directory = os.getcwd()
print("當前工作目錄:", current_directory)
center_points = []
frame_count = 0
while True:
    # 截取指定區域

    myScreenshot = pyautogui.screenshot(region=(x1, y1, x2, y2))
    save_path = os.path.join(output_folder, f'frame_{frame_count}.jpg')
    myScreenshot.save(save_path)
    frame = cv2.imread(save_path)
    print(f"frame_{frame_count}")
    frame_count += 1
    try:
        blocks = main(blocks, frame, center_points)
    except Exception as e:
        print(f"處理圖片時發生錯誤: {e}")
        continue

    image_folder = 'UAV_path-drone'
    # 將影像寬度調整為螢幕寬度的一半，高度按比例縮放
    image = cv2.imread(f'{image_folder}/path_0.jpg', 1)
    # 取得影像的寬度和高度，計算影像的長寬比
    height, width, _ = image.shape
    aspect_ratio = width / height
    new_width = screen_width // 2
    new_height = int(new_width / aspect_ratio)
    # 縮放圖像大小
    resized_image = cv2.resize(image, (new_width, new_height))
    image_name = os.path.basename(f'{image_folder}/path_0.jpg')
    # 在視窗中顯示影像名稱顯示縮放後的圖片
    cv2.setWindowTitle('Image', image_name)
    cv2.imshow('Image', resized_image)

    time.sleep(2)



    # 檢查是否按下 'q' 鍵來終止
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cv2.destroyAllWindows()


