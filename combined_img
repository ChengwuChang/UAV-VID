import os
import cv2
import numpy as np
import math


def split_image(image, num_rows, num_cols):
    # 獲取圖像的高度和寬度
    height, width = image.shape[:2]
    # 計算每個區塊的高度和寬度
    block_height = height // num_rows
    block_width = width // num_cols
    # 存儲所有區塊的列表
    blocks = []
    for r in range(num_rows):
        for c in range(num_cols):
            # 計算當前區塊的範圍
            start_row = r * block_height
            end_row = (r + 1) * block_height
            start_col = c * block_width
            end_col = (c + 1) * block_width
            # 提取當前區塊
            block = image[start_row:end_row, start_col:end_col]
            blocks.append(block)
    return blocks
def match_features(query_image, train_images):
    # 初始化 SIFT 檢測器
    sift = cv2.SIFT_create()
    # 使用 SIFT 找到 query_image 的關鍵點和描述子
    kp1, des1 = sift.detectAndCompute(query_image, None)
    # 創建 FLANN 匹配器
    flann = cv2.FlannBasedMatcher()
    # 儲存所有匹配的結果
    all_matches = []

    for train_image in train_images:
        # 使用 SIFT 找到 train_image 的關鍵點和描述子
        kp2, des2 = sift.detectAndCompute(train_image, None)
        # 進行特徵匹配
        matches = flann.knnMatch(des1, des2, k=2)
        # 剔除不好的匹配
        good_matches = []
        for m, n in matches:
            if m.distance < 0.7 * n.distance:
                good_matches.append(m)
        all_matches.append(len(good_matches))

        if len(good_matches) > 10:
            src_pts = np.float32([kp1[m.queryIdx].pt for m in good_matches]).reshape(-1, 1, 2)#大地圖
            dst_pts = np.float32([kp2[m.trainIdx].pt for m in good_matches]).reshape(-1, 1, 2)#小地圖
            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC, 5.0)
            matchesMask = mask.ravel().tolist()

            # 計算小地圖的中心座標
            x_center = np.mean([pt[0][0] for pt in dst_pts])
            y_center = np.mean([pt[0][1] for pt in dst_pts])

            # 將小地圖的中心座標轉換為numpy陣列
            center_pt = np.array([[x_center, y_center]], dtype=np.float32).reshape(-1, 1, 2)

            # 使用透視變換將小地圖的中心座標映射到大地圖上
            big_map_center = cv2.perspectiveTransform(center_pt, M)
            big_map_center = big_map_center.squeeze()
            big_map_center_x, big_map_center_y = map(int, big_map_center)
            center = [big_map_center_x,big_map_center_y]
            # print("映射後的中心座標:", big_map_center_x, big_map_center_y)
            # 使用透視變換將小地圖上的特徵點映射到大地圖上
            # big_map_keypoint = cv2.perspectiveTransform(dst_pts, M)
            # print("在小地圖上的特徵點座標：", dst_pts.squeeze())
            # print("映射到大地圖上的特徵點座標：", big_map_keypoint.squeeze())
            # x1, y1 = np.int32(big_map_keypoint[0][0])
            # x2, y2 = np.int32(big_map_keypoint[1][0])
            # x3, y3 = np.int32(big_map_keypoint[2][0])
            # x4, y4 = np.int32(big_map_keypoint[3][0])
            # center_x = (x1 + x2 + x3 + x4) / 4
            # center_y = (y1 + y2 + y3 + y4) / 4
            # print("中心坐標為:", center_x, center_y)
    return all_matches ,center

def find_most_matched_block(matches):
    most_matched_block_index = np.argmax(matches)
    return most_matched_block_index
def find_surrounding_indices(most_matched_block_index, num_rows, num_cols):
    # most_matched_block_index=15
    row_index = most_matched_block_index // num_cols
    col_index = most_matched_block_index % num_cols

    surrounding_indices = []
    for dr in range(-1, 2):
        for dc in range(-1, 2):
            r = row_index + dr
            c = col_index + dc
            if (dr != 0 or dc != 0) and 0 <= r < num_rows and 0 <= c < num_cols:
                surrounding_indices.append(r * num_cols + c)

    return surrounding_indices

# def find_most_matched_block(matches):
#     most_matched_block_index = np.argmax(matches)
#     num_cols = 6  # Assuming columns as per your previous code
#     # Calculate row and column index of the most matched block
#     row_index = most_matched_block_index // num_cols
#     col_index = most_matched_block_index % num_cols
#
#     # Get indices of surrounding blocks
#     surrounding_indices = []
#     for dr in range(-1, 2):
#         for dc in range(-1, 2):
#             r = row_index + dr
#             c = col_index + dc
#             # Check if the indices are within bounds
#             # 排除最匹配區塊本身和超出邊界的區塊
#             if (dr != 0 or dc != 0) and 0 <= r < num_rows and 0 <= c < num_cols:
#                 surrounding_indices.append(r * num_cols + c)
#
#     return most_matched_block_index, surrounding_indices




# 定義函數來將索引與對應的區塊匹配並返回結果列表
def match_indices_with_third_image(indices, third_image):
    matches_list = []
    for index in indices:
        # 確認索引是否在範圍內
        if 0 <= index < len(blocks):
            # 取得對應的區塊
            block = blocks[index]
            # 進行特徵匹配
            matches = match_features(third_image, [block])
            matches_list.append((index, matches))
    return matches_list

def show_matched_blocks(query_image, matched_indices, blocks):
    for index in matched_indices:
        if 0 <= index < len(blocks):
            block = blocks[index]
            cv2.imshow(f'Matched Block {index}', block)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

def merge_blocks_into_one_image(blocks, num_rows, num_cols):
    block_height, block_width = all_blocks[0].shape[:2]
    merged_image = np.zeros((num_rows * block_height // 2, num_cols * block_width // 2, 3), dtype=np.uint8)
    for r in range(num_rows):
        for c in range(num_cols):
            block_index = r * num_cols + c
            block = cv2.resize(blocks[block_index], (block_width // 2, block_height // 2))  # Resize each block
            merged_image[r * block_height // 2:(r + 1) * block_height // 2, c * block_width // 2:(c + 1) * block_width // 2] = block
    return merged_image

# def merge_blocks_into_one_image(blocks):
#     num_blocks = len(blocks)
#     block_height, block_width = blocks[0].shape[:2]
#
#     # 計算合併後圖像的寬度
#     total_width = 0
#     for i in range(num_blocks):
#         total_width += block_width
#
#     # 計算合併後圖像的高度
#     total_height = (num_blocks // num_cols + 1) * block_height
#
#     # 創建一個空白的合併後圖像
#     merged_image = np.zeros((total_height, total_width, 3), dtype=np.uint8)
#
#     # 將區塊按順序組合成圖像
#     x, y = 0, 0
#     for i, block in enumerate(blocks):
#         if i > 0 and i % num_cols == 0:
#             y += block_height
#             x = 0
#         merged_image[y:y + block_height, x:x + block_width] = block
#         x += block_width
#
#     return merged_image








def get_blocks_by_indices(all_blocks, indices):
    """
    根據索引號碼從所有區塊中取得對應的區塊陣列。

    參數：
        all_blocks (list): 包含所有區塊的列表。
        indices (list): 索引號碼的列表，用於指示要提取的區塊。

    返回：
        list: 包含對應索引的區塊陣列。
    """
    blocks = [all_blocks[index] for index in indices]
    return blocks

big_map_img = cv2.imread("14/jpg/14/23/23-1.jpg")
# 指定要分割的行和列數
num_rows = 6
num_cols = 6

new_num_rows = 3
new_num_cols = 3
all_blocks = split_image(big_map_img, num_rows, num_cols)
blocks = all_blocks
# print(blocks)
output_folder_name = "output_frames"
num = len(os.listdir("output_frames"))
# -------------------------------------------------------------------------
def main(blocks):
    for i in range(1, num+1):
        image = cv2.imread(f'{output_folder_name}/frame_{i-1}.jpg')
        matches,center = match_features(image, blocks)
        most_matched_block_index = find_most_matched_block(matches)
        best_index = None
        for j in range(0, (num_cols * num_rows)):
            if np.array_equal(all_blocks[j], blocks[most_matched_block_index]):
                best_index = j
                break
        print(f'最適合區域索引{best_index}')
        print("中心座標為:",center)
        surrounding_indices = find_surrounding_indices(best_index, num_rows, num_cols)

        print(surrounding_indices)
        # most_matched_block_index, surrounding_indices = find_most_matched_block(matches)
        # 取得最匹配的區塊以及其周圍的區塊
        print(best_index)
        most_matched_block = all_blocks[best_index]
        surrounding_blocks = [all_blocks[i] for i in surrounding_indices]
        # 將最匹配的區塊和周圍的區塊合併為一個列表
        blocks_to_match = [most_matched_block] + surrounding_blocks
        block_indices = []

        for i, block_to_match in enumerate(blocks_to_match):
            # 初始化索引
            block_index = None
            # 尋找 block_to_match 在 blocks 中的索引
            for j, block in enumerate(all_blocks):
                # 如果兩個陣列相等，則找到索引
                if np.array_equal(block_to_match, block):
                    block_index = j
                    break

            if block_index is not None:
                block_indices.append(block_index)
                print(f"區塊 {i}: 在 blocks 中的索引 = {block_index}")
            else:
                print(f"區塊 {i}: 找不到在 blocks 中的對應索引")
        block_indices_sorted = sorted(block_indices)
        print(block_indices_sorted)
        # show_matched_blocks(image, block_indices_sorted, blocks)
        # merged_image = merge_blocks_into_one_image([all_blocks[index] for index in block_indices_sorted], 3, 3)
        merged_image = merge_blocks_into_one_image([all_blocks[index] for index in block_indices_sorted],3,3)
        cv2.imshow('Merged Image', merged_image)
        cv2.waitKey(0)
        # sorted_blocks = [blocks[index] for index in block_indices_sorted]
        blocks = get_blocks_by_indices(all_blocks, block_indices_sorted)
main(blocks)

cv2.waitKey(0)
cv2.destroyAllWindows()

main(blocks)

cv2.waitKey(0)
cv2.destroyAllWindows()


# ----------------------------------------------------------------------------------------------------------

# def get_blocks_by_indices(all_blocks, indices):
#     """
#     根據索引號碼從所有區塊中取得對應的區塊陣列。
#
#     參數：
#         all_blocks (list): 包含所有區塊的列表。
#         indices (list): 索引號碼的列表，用於指示要提取的區塊。
#
#     返回：
#         list: 包含對應索引的區塊陣列。
#     """
#     blocks = [all_blocks[index] for index in indices]
#     return blocks
#
# # 示例使用
# # 假設你有一個圖像，你想要將它分割成 4 行 5 列的區塊
# num_rows = 4
# num_cols = 5
# image = cv2.imread("14/jpg/14/23/23-1.jpg")  # 假設這是你的圖像
# blocks = split_image(image, num_rows, num_cols)
#
# # 現在，假設你有一個索引列表，你想要提取對應的區塊
# indices = [5, 3, 9]  # 假設這是你想要的區塊的索引號碼
# selected_blocks = get_blocks_by_indices(blocks, indices)
# print(selected_blocks)  # 這將打印出對應的區塊陣列

